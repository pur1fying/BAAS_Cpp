name: CI


on: 
  workflow_dispatch: # allow manual triggering
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
  push:
    branches:
      - main
    paths: ['resource/**', 'apps/ocr_server/test/**', '.github/workflows/build.yaml', '**/CMakeLists.txt', '**/Makefile', '**/*.h', '**/*.hpp', '**/*.c', '**/*.cpp', '**/*.cmake']
  pull_request:
    types: [opened, synchronize, reopened]
    paths: ['resource/**', 'apps/ocr_server/test/**', '.github/workflows/build.yaml', '**/CMakeLists.txt', '**/Makefile', '**/*.h', '**/*.hpp', '**/*.c', '**/*.cpp', '**/*.cmake']


concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true


permissions:
  contents: write # for creating release


env:
  BUILD_TYPE: Release
  BUILD_BAAS_OCR: ON


jobs:
  Ubuntu-latest-cmake-x64:
    name: 'Build Binary for Linux x64'
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./baas_cpp
    steps:
      - name: Show GCC version
        run: g++ --version
      - name: Clone Source Repo
        id: checkout_main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: "baas_cpp"

      - name: Clone Prebuild Repo
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        id: checkout_prebuild
        uses: actions/checkout@v4
        with:
          repository: "pur1fying/BAAS_Cpp_prebuild"
          ref: "linux-x64"
          token: ${{ secrets.GHA_TOKEN_SECRET }}
          fetch-depth: 0
          path: "prebuild"

      - name: Install Build Dependencies
        id: install_build_depends
        run: |
          sudo apt-get update
          sudo apt-get install build-essential

      - name: Build
        id: cmake_build
        run: |
          echo "::group::Generate makefile"
          cmake -B build -DBUILD_BAAS_OCR=$BUILD_BAAS_OCR -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          echo "::endgroup::"
          echo "::group::Build"
          cmake --build build --config Release -j $(nproc)
          echo "::endgroup::"

      - name: Install Python
        id: install_python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install Test Dependencies
        id: install_test_depends 
        run: |
          if ${{ steps.install_python.outputs.cache-hit }} ;  then echo "::notice::Hitting pip cache, using cached packages may lead to issues.";  fi 
          python -m pip install --upgrade pip
          python -m pip install -r apps/ocr_server/test/requirements.txt
      
      - name: Run Test
        id: run_test
        run: |
          python -m unittest discover -s apps/ocr_server/test -p "*.py"
          rm -r -f ./build/bin/output
          rm -r -f ./build/bin/config

      - name: Upload Artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          path: ./baas_cpp/build/bin
          name: baas-ocr-bin-ubuntu-x64

      - name: Copy Binaries
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        working-directory: ./prebuild
        id: copy_bin
        run: |
          cp -a -f ../baas_cpp/build/bin/* .

      - name: Commit and Push
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        working-directory: ./prebuild
        continue-on-error: true
        id: commit_and_push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "New version pushed

          commit sha: ${{ github.sha }}
          commit msg: ${{ github.event.head_commit.message }}
          trigger: ${{ github.workflow }} (event: ${{ github.event_name }})
          build bot: ${{ github.job }} (run id: ${{ github.run_id }})"
          git push


  macOS-latest-cmake-arm64:
    name: 'Build Binary for macOS arm64'
    runs-on: macos-latest
    defaults:
      run:
        working-directory: ./baas_cpp
    steps:
      - name: Clone Source Repo
        id: checkout_main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: "baas_cpp"

      - name: Clone Prebuild Repo
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        id: checkout_prebuild
        uses: actions/checkout@v4
        with:
          repository: "pur1fying/BAAS_Cpp_prebuild"
          ref: "macos-arm64"
          token: ${{ secrets.GHA_TOKEN_SECRET }}
          fetch-depth: 0
          path: "prebuild"

      - name: Install Build Dependencies
        id: install_build_depends
        # continue-on-error: true
        run: |
          brew update

      - name: Build
        id: cmake_build
        run: |
          echo "::group::Generate makefile"
          cmake -B build -DBUILD_BAAS_OCR=$BUILD_BAAS_OCR -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          echo "::endgroup::"
          echo "::group::Build"
          cmake --build build --config Release -j $(sysctl -n hw.logicalcpu)
          echo "::endgroup::"

      - name: Install Python
        id: install_python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
  
      - name: Install Test Dependencies
        id: install_test_depends 
        run: |
          if ${{ steps.install_python.outputs.cache-hit }} ;  then echo "::notice::Hitting pip cache, using cached packages may lead to issues.";  fi 
          python -m pip install --upgrade pip
          python -m pip install -r apps/ocr_server/test/requirements.txt
          
      - name: Run Test
        id: run_test
        run: |
          python -m unittest discover -s apps/ocr_server/test -p "*.py"
          rm -r -f ./build/bin/output
          rm -r -f ./build/bin/config          

      - name: Upload artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          path: ./baas_cpp/build/bin
          name: baas-ocr-bin-macOS-arm64

      - name: Copy Binaries
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        working-directory: ./prebuild
        id: copy_bin
        run: |
          cp -a -f ../baas_cpp/build/bin/* .
  
      - name: Commit and Push
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        working-directory: ./prebuild
        continue-on-error: true
        id: commit_and_push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "New version pushed

          commit sha: ${{ github.sha }}
          commit msg: ${{ github.event.head_commit.message }}
          trigger: ${{ github.workflow }} (event: ${{ github.event_name }})
          build bot: ${{ github.job }} (run id: ${{ github.run_id }})"
          git push


  Windows-latest-cmake-x64:
    name: 'Build Binary for Windows x64'
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./baas_cpp
    steps:
      - name: Clone Source Repo
        id: checkout_main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: "baas_cpp"

      - name: Clone Prebuild Repo
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        id: checkout_prebuild
        uses: actions/checkout@v4
        with:
          repository: "pur1fying/BAAS_Cpp_prebuild"
          ref: "windows-x64"
          token: ${{ secrets.GHA_TOKEN_SECRET }}
          fetch-depth: 0
          path: "prebuild"

      - name: Install Build Dependencies
        id: install_build_depends
        run: |
          choco install ninja

      - name: Setup MSVC Dev Cmd   # Setup Developer Command Prompt for Microsotf Visual C++
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: x64

      - name: Build
        id: cmake_build
        run: |
          Write-Output "::group::Generate makefile"
          cmake -S . -B build -DBUILD_BAAS_OCR=${{env.BUILD_BAAS_OCR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja      # Hard encode command with env var before exec
          Write-Output "::endgroup::"
          Write-Output "::group::Build"
          cmake --build build --config Release -j 4      # TODO: add number of threads
          Write-Output "::endgroup::"

      - name: Install Python
        id: install_python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
  
      - name: Install Test Dependencies
        id: install_test_depends 
        run: |
          if ('${{ steps.install_python.outputs.cache-hit }}' -eq 'true') {Write-Output "::notice::Hitting pip cache, using cached packages may lead to issues."}
          python -m pip install --upgrade pip
          python -m pip install -r apps/ocr_server/test/requirements.txt
      
      - name: Run Test
        id: run_test
        run: |
          python -m unittest discover -s .\apps\ocr_server\test -p "*.py"
          Remove-Item -Path ".\build\bin\output" -Recurse -Force
          Remove-Item -Path ".\build\bin\config" -Recurse -Force

      - name: Upload artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          path: ./baas_cpp/build/bin
          name: baas-ocr-bin-windows-x64

      - name: Copy Binaries
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        working-directory: ./prebuild
        id: copy_bin
        run: |
          Copy-Item -Path "..\baas_cpp\build\bin\*" -Destination . -Recurse -Force

      - name: Commit and Push
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || github.event.inputs.create_release == 'true' }}
        working-directory: ./prebuild
        continue-on-error: true
        id: commit_and_push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "New version pushed

          commit sha: ${{ github.sha }}
          commit msg: ${{ github.event.head_commit.message }}
          trigger: ${{ github.workflow }} (event: ${{ github.event_name }})
          build bot: ${{ github.job }} (run id: ${{ github.run_id }})"
          git push   
